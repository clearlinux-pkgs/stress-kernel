diff -uNr fs/Makefile fs-foo/Makefile
--- fs/Makefile	Mon Dec  3 13:50:51 2001
+++ fs-foo/Makefile	Mon Dec  3 16:47:57 2001
@@ -4,7 +4,10 @@
 truncate: truncate.c
 	gcc -o truncate truncate.c
 
-all: holey truncate
+ftruncate64: ftruncate64.c
+	gcc -o ftruncate64 ftruncate64.c
+
+all: holey truncate ftruncate64
 
 clean:
-	rm holey truncate
+	rm holey truncate ftruncate64
diff -uNr fs/ftruncate64.c fs-foo/ftruncate64.c
--- fs/ftruncate64.c	Wed Dec 31 19:00:00 1969
+++ fs-foo/ftruncate64.c	Mon Dec  3 16:48:30 2001
@@ -0,0 +1,89 @@
+#define _GNU_SOURCE
+
+#include <stdio.h>
+#include <stdlib.h>
+#include <string.h>
+#include <sys/types.h>
+#include <sys/stat.h>
+#include <fcntl.h>
+#include <errno.h>
+#include <unistd.h>
+
+#define MAXFNAME 128
+#define SEED 12345
+#define LOW ((unsigned long long) 0x100000000ULL)
+#define HIGH ((unsigned long long) 0xFFFFFFFFFFFFFFFEULL)
+#define MAX_ERR_MSG 1024
+
+/* 
+ * Return a random u_long in the interval [low, high] 
+ */
+loff_t randint (unsigned long long low, unsigned long long high)
+{
+  unsigned long long normalized;
+
+  normalized = (unsigned long long) ( (float) rand() / 
+		       ( (float) RAND_MAX / (float) (high - low + 1) ) );
+  return (normalized + low);
+}
+
+
+int main (int argc, char *argv[])
+
+{
+
+  char *fname;
+  int iterations, fd, i;
+  off_t offset;
+
+  if (argc != 3) {
+    printf ("Usage: large_truncate [file_name] [iterations]\n");
+    exit (1);
+  }
+
+  if ( (fname = (char *) malloc (MAXFNAME)) == NULL) {
+    printf ("Malloc failed.\n");
+    exit (1);
+  }
+  
+  strncpy (fname, argv[1], (size_t) MAXFNAME);
+
+  iterations = strtol (argv[2], NULL, 10);
+
+  srand (SEED);
+
+  for (i = 0; i < iterations; i++) {
+
+    if ( (fd = open64(fname, O_RDWR | O_CREAT | O_NOFOLLOW | O_LARGEFILE, 
+		      S_IRWXU)) == -1) {
+      perror ("Open64");
+      exit (1);
+    }
+
+    offset = randint (LOW, HIGH);
+
+    /* printf ("Offset (0x%lx, 0x%lx) = 0x%lx\n", LOW, HIGH, offset); */
+
+    if (ftruncate64 (fd, offset) == -1) {
+	char* errmsg = (char *) malloc (MAX_ERR_MSG);
+	sprintf (errmsg, "Ftruncate64, offset=%ld", offset);
+	perror (errmsg);
+	free (errmsg);
+    }
+
+    if (close (fd) == -1) {
+      perror ("Close");
+      exit (1);
+    }
+
+    if (unlink (fname) == -1) {
+      perror ("Unlink");
+      exit (1);
+    }
+
+  }
+
+  exit (0);
+
+}
+		    
diff -uNr drivers/fs-test-driver.sh drivers-foo/fs-test-driver.sh
--- drivers/fs-test-driver.sh	Mon Dec  3 13:50:51 2001
+++ drivers-foo/fs-test-driver.sh	Mon Dec  3 17:38:20 2001
@@ -149,6 +149,20 @@
 rm -f $TRUNCATE_FILE >> /dev/null
 [ $? = 0 ] || { echo "Can't remove $TRUNCATE_FILE." ; exit -1 ; }
 
+
+# Ftruncate64 test: open64/ftruncate64/close/unlink.  Oops's 2.4.16
+# Also appears to fail intermittently on 2.4.9.  This is known.
+
+TMPFILE=`mktemp "$TEMP_DIR"/ftruncate64.XXXXXX`
+[ $? = 0 ] || { echo "Can not make ftruncate64 temp file." ; exit -1 ; }
+
+$FS_TEST_HOME_DIR/ftruncate64 $TMPFILE 1000 &
+CHILD=$!
+trap "kill -9 $CHILD ; rm $TMPFILE >> /dev/null 2>&1 ; exit -1" SIGINT SIGHUP SIGTERM
+
+wait
+[ $? = 0 ] || { echo "Ftruncate64 test failed." ; exit -1 ; }
+
 exit 0
 
 
